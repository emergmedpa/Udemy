{\rtf1\ansi\ansicpg1252\cocoartf1561
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Light;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red31\green36\blue45;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c16078\c18824\c23137;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl920\partightenfactor0

\f0\fs72 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Arrays and Iterators - Text with directions, references and code\
\pard\pardeftab720\sl580\partightenfactor0

\fs48 \cf2 Section 2, Lecture 26\
\pard\pardeftab720\sl440\sa400\partightenfactor0

\f1\fs36 \cf2 Array, created by including elements within square brackets:\cb1 \
\cb3 a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\cb1 \
\cb3 The index for an array starts with 0, so in the array above a[0] is 1\cb1 \
\cb3 Some methods you can use on arrays:\cb1 \
\cb3 arrayname.empty?\cb1 \
\cb3 arrayname.include?(itemname)\cb1 \
\cb3 arrayname.reverse\cb1 \
\cb3 arrayname.reverse! # use ! at the end to change the original array\cb1 \
\cb3 arrayname.shuffle\cb1 \
\cb3 arrayname.push(30) # will append new element 30 to the end array\cb1 \
\cb3 arrayname << 25 # << known as shovel operator will also append new element to the end of the array\cb1 \
\cb3 arrayname.unshift("someelement") # will add element "some element" to the beginning of the array\cb1 \
\cb3 arrayname.pop # will remove the last element of the array and return 1\cb1 \
\cb3 arrayname.uniq # will remove all the duplicates and display (will not change the original array)\cb1 \
\cb3 arrayname.uniq! # will remove all the duplicates in the original array\cb1 \
\cb3 A range:\cb1 \
\cb3 (0..25).to_a\cb1 \
\cb3 will create an array with elements from value 0 to 25\cb1 \
\cb3 (0..99).to_a.shuffle!\cb1 \
\cb3 will create an array with elements from value 0 to 99 in random order\cb1 \
\cb3 To loop through an array named y using the .each method and print out the value of each element:\cb1 \
\cb3 y.each \{ |i| puts i \}\cb1 \
\cb3 In plain terms: For each element i in array y print the value of i\cb1 \
\cb3 To execute iteration through an array called names using a block:\cb1 \
\cb3 names.each do |randomvariablename| # starts the do block\cb1 \
\cb3 puts "Hello #\{randomvariablename\}" # executes code for each element\cb1 \
\cb3 end # ends the do block\cb1 \
\cb3 To capitalize (or use another method) on each element of array called names:\cb1 \
\cb3 names.each \{ |randomvariablename| puts "Hello #\{randomvariablename.capitalize\}" \}\cb1 \
\cb3 Using the select method to pickup all the odd numbers from an array y:\cb1 \
\cb3 y.select \{ |number| number.odd? \} # selects the value and returns it only if the condition is met\cb1 \
\cb3 To join the elements of an array named p:\cb1 \
\cb3 p.join\cb1 \
\cb3 To join the elements of an array with space in between each element:\cb1 \
\cb3 p.join(" ")\cb1 \
\cb3 To join the elements of an array with dash in between each element:\cb1 \
\cb3 p.join("-")\cb1 \
}